spring.application.name=take-home

# Redis configuration for Docker environment
spring.data.redis.host=${REDIS_HOST:redis}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.timeout=2000ms

# External API configuration (same as local)
airport.api.base-url=https://api.aviationapi.com/v1
airport.api.airports-endpoint=${airport.api.base-url}/airports

# Airport cache configuration for Docker (using Redis)
airport.cache.type=redis
airport.cache.local.max-size=1000
airport.cache.local.expire-after-write=PT30M
airport.cache.local.expire-after-access=PT15M
airport.cache.redis.expire-after-write=PT30M

# Circuit Breaker configuration (same as local)
resilience4j.circuitbreaker.instances.airport-api.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.airport-api.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.airport-api.sliding-window-size=10
resilience4j.circuitbreaker.instances.airport-api.wait-duration-in-open-state=30s
resilience4j.circuitbreaker.instances.airport-api.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.airport-api.automatic-transition-from-open-to-half-open-enabled=true

# Timeout configuration
resilience4j.timelimiter.instances.airport-api.timeout-duration=10s
resilience4j.timelimiter.instances.airport-api.cancel-running-future=true

# Logging configuration
logging.level.com.sporty.take_home=INFO
logging.level.com.sporty.take_home.airport=INFO
logging.level.io.github.resilience4j=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n